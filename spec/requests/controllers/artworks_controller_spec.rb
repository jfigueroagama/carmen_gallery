require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ArtworksController do
  render_views

  def mock_artwork(stubs={})
    @mock_artwork ||= mock_model(Artwork, stubs).as_null_object
  end

  #describe "GET index" do
  #  it "assigns all artworks as @artworks" do
  #    Artwork.stub(:all) { [mock_artwork] }
  #    get :index
  #    assigns(:artworks).should eq([mock_artwork])
  #  end
  #end

  #describe "GET show" do  
  #  it "assigns the requested artwork as @artwork" do
  #   Artwork.stub(:find).with("1") { mock_artwork }
  #   get :show, :id => "1"
  #   assigns(:artwork).should be(mock_artwork)
  #  end
  #end
  
  describe "GET show" do
    before(:each) do
      @artwork = Factory(:artwork)
    end
    
    it "should be successful" do
      get :show, :id => @artwork
      response.should be_success
    end
    
    it "should find the right artwork" do
      get :show, :id => @artwork
      assigns(:artwork).should == @artwork
    end
    
    it "should show the artwork's microposts" do
      mp1 = Factory(:micropost, :artwork => @artwork, :content => "Foo bar")
      mp2 = Factory(:micropost, :artwork => @artwork, :content => "Baz quux")
      get :show, :id => @artwork
      response.should have_selector("span.content", :content => mp1.content)
      response.should have_selector("span.content", :content => mp2.content)
    end
    
  end

  describe "GET new" do
    it "assigns a new artwork as @artwork" do
      Artwork.stub(:new) { mock_artwork }
      get :new
      assigns(:artwork).should be(mock_artwork)
    end
  end

  describe "GET edit" do
    it "assigns the requested artwork as @artwork" do
      Artwork.stub(:find).with("37") { mock_artwork }
      get :edit, :id => "37"
      assigns(:artwork).should be(mock_artwork)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created artwork as @artwork" do
        Artwork.stub(:new).with({'these' => 'params'}) { mock_artwork(:save => true) }
        post :create, :artwork => {'these' => 'params'}
        assigns(:artwork).should be(mock_artwork)
      end

      it "redirects to the created artwork" do
        Artwork.stub(:new) { mock_artwork(:save => true) }
        post :create, :artwork => {}
        response.should redirect_to(artwork_url(mock_artwork))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved artwork as @artwork" do
        Artwork.stub(:new).with({'these' => 'params'}) { mock_artwork(:save => false) }
        post :create, :artwork => {'these' => 'params'}
        assigns(:artwork).should be(mock_artwork)
      end

      it "re-renders the 'new' template" do
        Artwork.stub(:new) { mock_artwork(:save => false) }
        post :create, :artwork => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested artwork" do
        Artwork.stub(:find).with("37") { mock_artwork }
        mock_artwork.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :artwork => {'these' => 'params'}
      end

      it "assigns the requested artwork as @artwork" do
        Artwork.stub(:find) { mock_artwork(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:artwork).should be(mock_artwork)
      end

      it "redirects to the artwork" do
        Artwork.stub(:find) { mock_artwork(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(artwork_url(mock_artwork))
      end
    end

    describe "with invalid params" do
      it "assigns the artwork as @artwork" do
        Artwork.stub(:find) { mock_artwork(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:artwork).should be(mock_artwork)
      end

      it "re-renders the 'edit' template" do
        Artwork.stub(:find) { mock_artwork(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested artwork" do
      Artwork.stub(:find).with("37") { mock_artwork }
      mock_artwork.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the artworks list" do
      Artwork.stub(:find) { mock_artwork }
      delete :destroy, :id => "1"
      response.should redirect_to(artworks_url)
    end
  end

end
